code,label
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
pragma solidity ^0.8.0; contract SafeContract { uint public a; function setA(uint _a) public { a = _a; } },0
"contract Reentrant { function withdraw(uint _amount) public { (bool success,) = msg.sender.call{value: _amount}(""""); require(success); } }",1
contract GasInefficient { uint[] public data; function inefficient() public { for(uint i=0; i<10000; i++){ data.push(i); } } },2
contract AccessControl { address owner; constructor() { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } },3
contract Simple { function get() public pure returns(uint){ return 1; } },0
contract Attacker { function attack() public { victim.withdraw(); } },1
contract Example { mapping(uint => uint) map; function setMany() public { for(uint i=0;i<100;i++){ map[i] = i; } } },2
contract AdminOnly { address admin; function setAdmin(address _admin) public { admin = _admin; } function change() public onlyAdmin { } },3
